#include <iostream>
#include <vector>
#include <chrono>
#include <random>
#include <algorithm>

using namespace std;
using namespace std::chrono;

vector<int> quick_sort(vector<int>& arr) {
    if (arr.size() <= 1) {
        return arr;
    }
    int pivot = arr[arr.size() / 2];
    vector<int> left, middle, right;
    for (int i : arr) {
        if (i < pivot) {
            left.push_back(i);
        } else if (i == pivot) {
            middle.push_back(i);
        } else {
            right.push_back(i);
        }
    }
    vector<int> sorted_left = quick_sort(left);
    vector<int> sorted_right = quick_sort(right);
    vector<int> sorted_arr;
    sorted_arr.reserve(sorted_left.size() + middle.size() + sorted_right.size());
    sorted_arr.insert(sorted_arr.end(), sorted_left.begin(), sorted_left.end());
    sorted_arr.insert(sorted_arr.end(), middle.begin(), middle.end());
    sorted_arr.insert(sorted_arr.end(), sorted_right.begin(), sorted_right.end());
    return sorted_arr;
}

void recursive_quick_sort() {
    int num_elements;
    cout << "Enter the number of elements: ";
    cin >> num_elements;
    vector<int> arr(num_elements);
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dis(1, 1000);
    generate(arr.begin(), arr.end(), [&](){ return dis(gen); });
    auto start_time = high_resolution_clock::now();
    vector<int> sorted_arr = quick_sort(arr);
    auto end_time = high_resolution_clock::now();
    auto elapsed_time = duration_cast<duration<double>>(end_time - start_time);
    
    
    cout << "\nElapsed Time: " << elapsed_time.count() << " seconds" << endl;
}

int main() {
    recursive_quick_sort();
    return 0;
}
